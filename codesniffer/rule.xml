<?xml version="1.0"?>
<ruleset name="Peytz WordPress">
	<description>Peytz WordPress ruleset for PHP CodeSniffer</description>

	<rule ref="WordPress-Core">
		<exclude name="Generic.Files.LowercasedFilename.NotFound"/>
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>
		<exclude name="WordPress.Files.FileName.UnderscoresNotAllowed"/>
		<exclude name="WordPress.PHP.YodaConditions"/>
		<exclude name="WordPress.WP.I18n.MissingTranslatorsComment" />
		<exclude name="WordPress.WP.I18n.NonSingularStringLiteralDomain" />
	</rule>

	<exclude-pattern>*\vendor\*</exclude-pattern>
	<exclude-pattern>*\frontend\wp\*</exclude-pattern>
	<exclude-pattern>*\plugins\ewww-image-optimizer/*</exclude-pattern>

	<!-- PHP code MUST use only UTF-8 without BOM. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- Class constants MUST be declared in all upper case with underscore separators. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<!-- The constants 'true', 'false' or 'null' must be written in lowercase. -->
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<!-- When present, there MUST be one blank line after the namespace declaration. -->
	<rule ref="PSR2.Namespaces.NamespaceDeclaration"/>

	<!-- When present, all use declarations MUST go after the namespace declaration.
		There MUST be one use keyword per declaration.
		There MUST be one blank line after the use block. -->
	<rule ref="PSR2.Namespaces.UseDeclaration"/>

	<!-- The extends and implements keywords MUST be declared on the same line as the class name.
		The opening brace for the class go MUST go on its own line; the closing brace for the class MUST go on the next line after the body.
		Lists of implements MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line. -->
	<!--<rule ref="PSR2.Classes.ClassDeclaration"/>-->

	<!-- Ensures that class members have scope modifiers (public, protected, private). -->
	<rule ref="Squiz.Scope.MemberVarScope"/>

	<!-- Visibility MUST be declared on all methods. -->
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

	<!-- Ensures that $this is not used in static methods to avoid runtime errors.  -->
	<rule ref="Squiz.Scope.StaticThisUsage"/>

	<!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- Ensures that there is one blank lines between each member declaration.-->
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

	<!-- Method arguments with default values MUST go at the end of the argument list. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<!-- A class or interface must not be defined in multiple files.-->
	<rule ref="Generic.Classes.DuplicateClassName"/>

	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

	<!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
	<properties>
	<property name="equalsSpacing" value="1"/>
	</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
	<severity>0</severity>
	</rule>

	<!--Arrays must be declared with short syntax e.g. [] -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax.Found" />

	<!-- If- and elseif-statements may not be unconditional. -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- Ensures that there are no function definitions inside of functions. Closure are ok. -->
	<rule ref="Squiz.PHP.InnerFunctions"/>

	<!-- Ensures that there is no whitespace before a semicolon. -->
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

	<!-- Ensures there is no whitespace before a ObjectOperator ( -> ) -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>

	<!--If there are multiple adjacent assignments, the equals signs of each assignment have to be aligned. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment"/>
	<!-- test. i think is equeal spacing in functions call -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- Verifies that there are no else if statements. Elseif should be used instead  -->
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
	<!-- Warns about usage for the eval() function  -->
	<rule ref="Squiz.PHP.Eval"/>

	<!--Ensures that there are no function definitions inside of functions. Closure are ok. -->
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<!--Warns about code that can never been executed. This happens when a function returns before the code, or a break ends execution of a statement etc. -->
	<rule ref="Squiz.PHP.NonExecutableCode"/>

	<!--Checks the separation between methods in a class or interface. Methods are expected to have two blank lines between them. (we use only 1 blank line) -->
	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>

	<!--Ensures all language constructs (without brackets) contain a single space between themselves and their content. -->
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

	<!-- Ensures that operators have one space surrounding them. -->
	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
</ruleset>
